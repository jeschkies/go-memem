// Code generated by command: go run asm.go -out bytes.s -stubs bytes.go. DO NOT EDIT.

#include "textflag.h"

// func Mask(needle []byte, haystack []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·Mask(SB), NOSPLIT, $0-56
	MOVQ         haystack_base+24(FP), AX
	MOVQ         needle_len+8(FP), CX
	DECQ         CX
	MOVQ         needle_base+0(FP), DX
	MOVQ         DX, BX
	ADDQ         CX, BX
	VPBROADCASTB (DX), Y0
	VPBROADCASTB (BX), Y1
	MOVQ         AX, BX
	ADDQ         CX, BX
	VMOVDQU      (AX), Y2
	VMOVDQU      (BX), Y3
	VPCMPEQB     Y0, Y2, Y0
	VPCMPEQB     Y1, Y3, Y1
	VPAND        Y0, Y1, Y0

	// calculate offsets
	VPMOVMSKB Y0, BX

	// loop over offsets, ie bit positions
offsets_loop:
	CMPL   BX, $0x00
	JE     offsets_loop_done
	TZCNTL BX, SI
	MOVQ   AX, DI
	ADDQ   SI, DI

	// test chunk
	// compare two slices
	MOVQ CX, R8
	MOVQ DX, R9

memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R8, $0x00
	JE   memcmp_loop_done
	MOVB (R9), R10
	CMPB (DI), R10
	JNE  memcmp_loop_done
	ADDQ $0x01, DI
	ADDQ $0x01, R9
	DECQ R8
	JMP  memcmp_loop

memcmp_loop_done:
	CMPQ R8, $0x00
	JE   chunk_match
	MOVL BX, DI
	DECL DI
	ANDL DI, BX
	JMP  offsets_loop

offsets_loop_done:
chunk_match:
	MOVQ SI, ret+48(FP)
	RET

// func Search(haystack []byte, needle []byte) bool
// Requires: AVX, AVX2, BMI
TEXT ·Search(SB), NOSPLIT, $0-49
	MOVQ needle_base+24(FP), AX
	MOVQ needle_len+32(FP), CX
	MOVQ haystack_base+0(FP), DX
	MOVQ DX, BX
	ADDQ haystack_len+8(FP), BX
	SUBQ $0x20, BX

	// create vector filled with first and last character
	VPBROADCASTB needle+0(FP), Y0
	MOVQ         needle+0(FP), SI
	ADDQ         CX, SI
	DECQ         SI
	VPBROADCASTB (SI), Y1

chunk_loop:
	CMPQ     DX, BX
	JG       chunk_loop_end
	MOVQ     DX, SI
	ADDQ     CX, SI
	VMOVDQU  (DX), Y2
	VMOVDQU  (SI), Y3
	VPCMPEQB Y0, Y2, Y2
	VPCMPEQB Y1, Y3, Y3
	VPAND    Y2, Y3, Y2

	// calculate offsets
	VPMOVMSKB Y2, SI

	// loop over offsets, ie bit positions
offsets_loop:
	CMPL   SI, $0x00
	JE     offsets_loop_done
	TZCNTL SI, DI
	MOVQ   DX, R8
	ADDQ   DI, R8

	// test chunk
	// compare two slices
	MOVQ CX, DI
	MOVQ AX, R9

memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ DI, $0x00
	JE   memcmp_loop_done
	MOVB (R9), R10
	CMPB (R8), R10
	JNE  memcmp_loop_done
	ADDQ $0x01, R8
	ADDQ $0x01, R9
	DECQ DI
	JMP  memcmp_loop

memcmp_loop_done:
	CMPQ DI, $0x00
	JE   chunk_match
	MOVL SI, DI
	DECL DI
	ANDL DI, SI
	JMP  offsets_loop

offsets_loop_done:
chunk_match:
	ADDQ $0x20, DX
	JMP  chunk_loop

chunk_loop_end:
	MOVB $0x00, ret+48(FP)
	RET
