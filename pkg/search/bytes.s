// Code generated by command: go run asm.go -out bytes.s -stubs bytes.go. DO NOT EDIT.

#include "textflag.h"

// func findInChunk(needle []byte, haystack []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·findInChunk(SB), NOSPLIT, $0-56
	MOVQ haystack_base+24(FP), AX
	MOVQ needle_len+8(FP), CX
	DECQ CX
	MOVQ needle_base+0(FP), DX

	// create vector filled with first and last character
	MOVQ         DX, BX
	ADDQ         CX, BX
	VPBROADCASTB (DX), Y0
	VPBROADCASTB (BX), Y1
	MOVQ         AX, BX
	ADDQ         CX, BX
	VMOVDQU      (AX), Y2
	VMOVDQU      (BX), Y3
	VPCMPEQB     Y0, Y2, Y0
	VPCMPEQB     Y1, Y3, Y1
	VPAND        Y0, Y1, Y0

	// calculate offsets
	VPMOVMSKB Y0, BX
	XORQ      SI, SI

	// loop over offsets, ie bit positions
offsets_loop:
	CMPL   BX, $0x00
	JE     offsets_loop_done
	TZCNTL BX, SI
	MOVQ   AX, DI
	ADDQ   SI, DI

	// test chunk
	// compare two slices
	MOVQ CX, R8
	MOVQ DX, R9

memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R8, $0x00
	JE   memcmp_loop_done
	MOVB (R9), R10
	CMPB (DI), R10
	JNE  memcmp_loop_done
	ADDQ $0x01, DI
	ADDQ $0x01, R9
	DECQ R8
	JMP  memcmp_loop

memcmp_loop_done:
	CMPQ R8, $0x00
	JE   chunk_match
	MOVL BX, DI
	DECL DI
	ANDL DI, BX
	JMP  offsets_loop

offsets_loop_done:
chunk_match:
	MOVQ SI, ret+48(FP)
	RET

// func Index(haystack []byte, needle []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·Index(SB), NOSPLIT, $0-56
	MOVQ needle_base+24(FP), AX
	MOVQ needle_len+32(FP), CX
	DECQ CX
	MOVQ haystack_base+0(FP), DX
	MOVQ DX, BX
	ADDQ haystack_len+8(FP), BX
	MOVQ BX, SI
	SUBQ $0x20, SI
	MOVQ DX, DI

	// create vector filled with first and last character
	MOVQ         AX, R8
	ADDQ         CX, R8
	VPBROADCASTB (AX), Y0
	VPBROADCASTB (R8), Y1

chunk_loop:
	CMPQ     DI, SI
	CMPQ     DI, BX
	JG       chunk_loop_end
	MOVQ     DX, R8
	ADDQ     CX, R8
	VMOVDQU  (DX), Y2
	VMOVDQU  (R8), Y3
	VPCMPEQB Y0, Y2, Y2
	VPCMPEQB Y1, Y3, Y3
	VPAND    Y2, Y3, Y2

	// calculate offsets
	VPMOVMSKB Y2, R8
	XORQ      R9, R9

	// loop over offsets, ie bit positions
offsets_loop:
	CMPL   R8, $0x00
	JE     offsets_loop_done
	TZCNTL R8, R9
	MOVQ   DX, R10
	ADDQ   R9, R10

	// test chunk
	// compare two slices
	MOVQ CX, R11
	MOVQ AX, R12

memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R11, $0x00
	JE   memcmp_loop_done
	MOVB (R12), R13
	CMPB (R10), R13
	JNE  memcmp_loop_done
	ADDQ $0x01, R10
	ADDQ $0x01, R12
	DECQ R11
	JMP  memcmp_loop

memcmp_loop_done:
	CMPQ R11, $0x00
	JE   chunk_match
	MOVL R8, R10
	DECL R10
	ANDL R10, R8
	JMP  offsets_loop

offsets_loop_done:
chunk_match:
	ADDQ $0x20, DI
	JMP  chunk_loop

chunk_loop_end:
	MOVQ R9, ret+48(FP)
	RET
