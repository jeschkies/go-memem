// Code generated by command: go run asm.go -out bytes.s -stubs bytes.go. DO NOT EDIT.

#include "textflag.h"

// func findInChunk(needle []byte, haystack []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·findInChunk(SB), NOSPLIT, $0-56
	MOVQ haystack_base+24(FP), AX
	MOVQ needle_len+8(FP), CX
	DECQ CX
	MOVQ needle_base+0(FP), DX

	// create vector filled with first and last character
	MOVQ         DX, BX
	ADDQ         CX, BX
	VPBROADCASTB (DX), Y0
	VPBROADCASTB (BX), Y1
	MOVQ         AX, BX
	ADDQ         CX, BX
	VMOVDQU      (AX), Y2
	VMOVDQU      (BX), Y3
	VPCMPEQB     Y0, Y2, Y0
	VPCMPEQB     Y1, Y3, Y1
	VPAND        Y0, Y1, Y0

	// calculate offsets
	VPMOVMSKB Y0, BX
	MOVQ      $-1, SI

	// loop over offsets, ie bit positions
test_offsets_loop:
	CMPL   BX, $0x00
	JE     test_offsets_loop_done
	TZCNTL BX, SI
	MOVQ   AX, DI
	ADDQ   SI, DI

	// test chunk
	// compare two slices
	MOVQ CX, R8
	MOVQ DX, R9

test_memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R8, $0x00
	JE   test_memcmp_loop_done
	MOVB (R9), R10
	CMPB (DI), R10
	JNE  test_memcmp_loop_done
	ADDQ $0x01, DI
	ADDQ $0x01, R9
	DECQ R8
	JMP  test_memcmp_loop

test_memcmp_loop_done:
	// break early on a match
	CMPQ R8, $0x00
	JE   test_chunk_match
	MOVL BX, SI
	DECL SI
	ANDL SI, BX
	JMP  test_offsets_loop

test_offsets_loop_done:
	MOVQ $-1, SI

test_chunk_match:
	MOVQ SI, ret+48(FP)
	RET

// func Index(haystack []byte, needle []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·Index(SB), NOSPLIT, $0-56
	MOVQ needle_base+24(FP), AX
	MOVQ needle_len+32(FP), CX
	DECQ CX
	MOVQ haystack_base+0(FP), DX
	MOVQ DX, BX
	ADDQ haystack_len+8(FP), BX
	MOVQ BX, SI
	SUBQ $0x20, SI
	MOVQ DX, DI

	// create vector filled with first and last character
	MOVQ         AX, R8
	ADDQ         CX, R8
	VPBROADCASTB (AX), Y0
	VPBROADCASTB (R8), Y1

chunk_loop:
	CMPQ     DI, SI
	JG       chunk_loop_end
	MOVQ     DI, R8
	ADDQ     CX, R8
	VMOVDQU  (DI), Y2
	VMOVDQU  (R8), Y3
	VPCMPEQB Y0, Y2, Y2
	VPCMPEQB Y1, Y3, Y3
	VPAND    Y2, Y3, Y2

	// calculate offsets
	VPMOVMSKB Y2, R8
	MOVQ      $-1, R9

	// loop over offsets, ie bit positions
main_offsets_loop:
	CMPL   R8, $0x00
	JE     main_offsets_loop_done
	TZCNTL R8, R9
	MOVQ   DI, R10
	ADDQ   R9, R10

	// test chunk
	// compare two slices
	MOVQ CX, R11
	MOVQ AX, R12

main_memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R11, $0x00
	JE   main_memcmp_loop_done
	MOVB (R12), R13
	CMPB (R10), R13
	JNE  main_memcmp_loop_done
	ADDQ $0x01, R10
	ADDQ $0x01, R12
	DECQ R11
	JMP  main_memcmp_loop

main_memcmp_loop_done:
	// break early on a match
	CMPQ R11, $0x00
	JE   main_chunk_match
	MOVL R8, R9
	DECL R9
	ANDL R9, R8
	JMP  main_offsets_loop

main_offsets_loop_done:
	MOVQ $-1, R9

main_chunk_match:
	// break early when offset is >=0.
	CMPQ R9, $0x00
	JGE  matched
	ADDQ $0x20, DI
	JMP  chunk_loop

matched:
	// adjust the offset and return the true index
	MOVQ DI, AX
	SUBQ DX, AX
	ADDQ R9, AX
	MOVQ AX, ret+48(FP)
	RET

chunk_loop_end:
	// match remaining bytes if any
	CMPQ     DI, BX
	JGE      not_matched
	MOVQ     BX, DX
	SUBQ     DI, DX
	CMPQ     DX, CX
	JGE      not_enough_bytes_left
	MOVQ     SI, DX
	ADDQ     CX, DX
	VMOVDQU  (SI), Y2
	VMOVDQU  (DX), Y3
	VPCMPEQB Y0, Y2, Y0
	VPCMPEQB Y1, Y3, Y1
	VPAND    Y0, Y1, Y0

	// calculate offsets
	VPMOVMSKB Y0, DX
	MOVQ      $-1, BX

	// loop over offsets, ie bit positions
remaining_offsets_loop:
	CMPL   DX, $0x00
	JE     remaining_offsets_loop_done
	TZCNTL DX, BX
	MOVQ   SI, DI
	ADDQ   BX, DI

	// test chunk
	// compare two slices
	MOVQ CX, R8
	MOVQ AX, R9

remaining_memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R8, $0x00
	JE   remaining_memcmp_loop_done
	MOVB (R9), R10
	CMPB (DI), R10
	JNE  remaining_memcmp_loop_done
	ADDQ $0x01, DI
	ADDQ $0x01, R9
	DECQ R8
	JMP  remaining_memcmp_loop

remaining_memcmp_loop_done:
	// break early on a match
	CMPQ R8, $0x00
	JE   remaining_chunk_match
	MOVL DX, BX
	DECL BX
	ANDL BX, DX
	JMP  remaining_offsets_loop

remaining_offsets_loop_done:
	MOVQ $-1, BX

remaining_chunk_match:
	MOVQ BX, R9
	JMP  match_remaining_done

not_enough_bytes_left:
	MOVQ $-1, R9

match_remaining_done:
not_matched:
	MOVQ R9, ret+48(FP)
	RET

// func matchRemaining(needle []byte, haystack []byte) int64
// Requires: AVX, AVX2, BMI
TEXT ·matchRemaining(SB), NOSPLIT, $0-56
	MOVQ     needle_base+0(FP), DX
	MOVQ     needle_len+8(FP), BX
	DECQ     BX
	MOVQ     haystack_base+24(FP), CX
	MOVQ     CX, SI
	ADDQ     haystack_len+32(FP), SI
	MOVQ     AX, CX
	SUBQ     $0x20, DI
	MOVQ     AX, CX
	MOVQ     SI, CX
	SUBQ     AX, CX
	CMPQ     CX, BX
	JGE      not_enough_bytes_left
	MOVQ     DI, AX
	ADDQ     BX, AX
	VMOVDQU  (DI), Y1
	VMOVDQU  (AX), Y2
	VPCMPEQB Y0, Y1, Y1
	VPCMPEQB Y0, Y2, Y0
	VPAND    Y1, Y0, Y0

	// calculate offsets
	VPMOVMSKB Y0, AX
	MOVQ      $-1, CX

	// loop over offsets, ie bit positions
remaining_offsets_loop:
	CMPL   AX, $0x00
	JE     remaining_offsets_loop_done
	TZCNTL AX, CX
	MOVQ   DI, SI
	ADDQ   CX, SI

	// test chunk
	// compare two slices
	MOVQ BX, R8
	MOVQ DX, R9

remaining_memcmp_loop:
	// the loop is done; the chunks must be equal
	CMPQ R8, $0x00
	JE   remaining_memcmp_loop_done
	MOVB (R9), R10
	CMPB (SI), R10
	JNE  remaining_memcmp_loop_done
	ADDQ $0x01, SI
	ADDQ $0x01, R9
	DECQ R8
	JMP  remaining_memcmp_loop

remaining_memcmp_loop_done:
	// break early on a match
	CMPQ R8, $0x00
	JE   remaining_chunk_match
	MOVL AX, CX
	DECL CX
	ANDL CX, AX
	JMP  remaining_offsets_loop

remaining_offsets_loop_done:
	MOVQ $-1, CX

remaining_chunk_match:
	MOVQ CX, AX
	JMP  match_remaining_done

not_enough_bytes_left:
	MOVQ $-1, AX

match_remaining_done:
	MOVQ AX, ret+48(FP)
	RET
